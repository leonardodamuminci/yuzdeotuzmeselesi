name: RSI Wick Touch Scan (one-file)

on:
  schedule:
    - cron: "0 */2 * * *"    # Her 2 saatte bir (UTC)
  workflow_dispatch: {}       # Elle çalıştırma düğmesi

jobs:
  run-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Write inline bot (no deps)
        shell: bash
        run: |
          cat > bot_inline.py << 'PY'
          import os, json, math, urllib.request, urllib.error
          from datetime import datetime, timezone, timedelta

          BOT = os.environ.get("TELEGRAM_BOT_TOKEN")
          CHAT = os.environ.get("TELEGRAM_CHAT_ID")
          assert BOT and CHAT, "TELEGRAM_BOT_TOKEN / TELEGRAM_CHAT_ID eksik!"

          def http_get_json(url, timeout=20):
              req = urllib.request.Request(url, headers={"User-Agent":"Mozilla/5.0"})
              with urllib.request.urlopen(req, timeout=timeout) as r:
                  return json.loads(r.read().decode())

          def http_post_json(url, payload, timeout=20):
              data = json.dumps(payload).encode("utf-8")
              req = urllib.request.Request(url, data=data, headers={"Content-Type":"application/json"})
              with urllib.request.urlopen(req, timeout=timeout) as r:
                  return json.loads(r.read().decode())

          def send_tg(text):
              url = f"https://api.telegram.org/bot{BOT}/sendMessage"
              parts = [text[i:i+3900] for i in range(0, len(text), 3900)] or [text]
              for p in parts:
                  try:
                      http_post_json(url, {"chat_id": CHAT, "text": p})
                  except Exception as e:
                      print("Telegram error:", e)

          def rsi_wilder(series, period):
              x = list(map(float, series))
              n = len(x)
              r = [math.nan]*n
              if n <= period: return r
              delta = [x[i]-x[i-1] for i in range(1,n)]
              gains = [d if d>0 else 0.0 for d in delta]
              losses= [-d if d<0 else 0.0 for d in delta]
              avg_g = [math.nan]*n; avg_l = [math.nan]*n
              avg_g[period] = sum(gains[:period])/period
              avg_l[period] = sum(losses[:period])/period
              for i in range(period+1, n):
                  avg_g[i] = (avg_g[i-1]*(period-1) + gains[i-1]) / period
                  avg_l[i] = (avg_l[i-1]*(period-1) + losses[i-1]) / period
              for i in range(period, n):
                  rs = avg_g[i] / (avg_l[i] + 1e-12)
                  r[i] = 100.0 - 100.0/(1.0+rs)
              return r

          def sma(arr, period):
              n = len(arr)
              out = [math.nan]*n
              for i in range(period-1, n):
                  window = arr[i-period+1:i+1]
                  if any(math.isnan(v) for v in window): 
                      continue
                  out[i] = sum(window)/period
              return out

          def now_tr():
              tr = timezone(timedelta(hours=3))  # Türkiye saati
              return datetime.now(tr).strftime("%Y-%m-%d %H:%M:%S %Z")

          def scan():
              symbols = ["BTCUSDT","ETHUSDT","BNBUSDT","XRPUSDT","SOLUSDT"]  # başlangıç listesi
              header = f"⏱️ {now_tr()}\n📡 Binance 1D wick-touch taraması (2 saatte 1)\n⏳ RSI=14, SMA=14 | Eşikler: 0.7 / 1.3\n"
              results = []
              for sym in symbols:
                  try:
                      url = f"https://api.binance.com/api/v3/klines?symbol={sym}&interval=1d&limit=60"
                      klines = http_get_json(url)
                      if not klines or len(klines) < 40: 
                          continue
                      highs = [float(k[2]) for k in klines]
                      lows  = [float(k[3]) for k in klines]

                      def rsi_and_sma(vals):
                          rsi = rsi_wilder(vals, 14)
                          return rsi, sma(rsi, 14)

                      rsi_low,  sma_low  = rsi_and_sma(lows)
                      rsi_high, sma_high = rsi_and_sma(highs)

                      rl_c, rl_p = rsi_low[-1],  rsi_low[-2]
                      sl_c, sl_p = sma_low[-1],  sma_low[-2]
                      rh_c, rh_p = rsi_high[-1], rsi_high[-2]
                      sh_c, sh_p = sma_high[-1], sma_high[-2]
                      low_c, high_c = lows[-1], highs[-1]

                      buy  = (not math.isnan(rl_c) and not math.isnan(sl_c) and
                              not math.isnan(rl_p) and not math.isnan(sl_p) and
                              rl_c <= sl_c*0.7 and rl_p > sl_p*0.7)

                      sell = (not math.isnan(rh_c) and not math.isnan(sh_c) and
                              not math.isnan(rh_p) and not math.isnan(sh_p) and
                              rh_c >= sh_c*1.3 and rh_p <  sh_p*1.3)

                      if buy:
                          tp = low_c*1.3
                          results.append(f"🟢 BUY {sym} @ {low_c:.8g} | TP≈{tp:.8g} | RSI(low)={rl_c:.2f} SMA(low)={sl_c:.2f}")
                      if sell:
                          tp = high_c/1.3
                          results.append(f"🔴 SELL {sym} @ {high_c:.8g} | TP≈{tp:.8g} | RSI(high)={rh_c:.2f} SMA(high)={sh_c:.2f}")
                  except Exception as e:
                      results.append(f"ERR {sym}: {e}")

              body = header + ("\n".join(results) if results else "• İşlem yok")
              send_tg(body)

          if __name__ == "__main__":
              scan()
          PY

      - name: Run bot
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: python bot_inline.py
